{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quote","author","quoteObj","setQuoteObj","color","setColor","document","querySelector","style","backgroundColor","class","id","href","data-text","data-url","data-hashtags","data-dnt","data-show-count","onClick","fetch","then","response","json","data","quotes","Math","floor","random","length","prev","colorArray","i","getRandomColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2NA+EeA,MA3Df,WAAgB,IAAD,EAEmBC,mBAAS,CACvCC,MAAO,kDACPC,OAAQ,kBAJG,mBAENC,EAFM,KAEIC,EAFJ,OAOaJ,mBAAS,SAPtB,mBAONK,EAPM,KAOCC,EAPD,KA6Bb,OAFAC,SAASC,cAAc,SAASC,MAAMC,gBAAkBL,EAGtD,sBAAKM,MAAM,UAAX,UACE,sBAAKC,GAAG,YAAR,UACE,sBAAKA,GAAG,aAAR,UACE,mBAAGD,MAAM,oBAAoBF,MAAO,CAAEJ,MAAOA,KAC7C,sBAAMO,GAAG,OAAOH,MAAO,CAAEJ,MAAOA,GAAhC,SAA0CF,EAASF,WAErD,qBAAKW,GAAG,eAAR,SACE,uBAAMA,GAAG,SAASH,MAAO,CAAEJ,MAAOA,GAAlC,eAA8CF,EAASD,YAEzD,sBAAKU,GAAG,aAAR,UACE,mBAAGC,KAAK,gDAAgDF,MAAM,uBAC5DG,YAAA,UAAcX,EAASF,MAAvB,aAAiCE,EAASD,QAC1Ca,WAAS,IACTC,gBAAc,UACdC,WAAS,OACTC,kBAAgB,OAChBT,MAAO,CAAEC,gBAAiBL,GAN5B,SAOE,mBAAGM,MAAM,qBAIX,wBAAQC,GAAG,YAAYO,QA1CX,WAClBC,MA3Ba,0IA4BVC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,IAAIrB,EAAWqB,EAAKC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKC,OAAOI,SAClEzB,GAAY,SAAA0B,GACV,OAAO,2BACFA,GADL,IAEE7B,MAAOE,EAASF,MAChBC,OAAQC,EAASD,eAKzBI,EAxCJ,WAGE,IAFA,IAAIyB,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,KACrE1B,EAAQ,IACH2B,EAAI,EAAGA,EAAI,EAAGA,IACrB3B,GAAS0B,EAAWL,KAAKC,MAAMD,KAAKE,SAAWG,EAAWF,SAG5D,OAAOxB,EAiCI4B,KA0B0CxB,MAAO,CAAEC,gBAAiBL,GAAvE,6BAGJ,qBAAKM,MAAM,SAAX,6BC9DSuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BX,M","file":"static/js/main.fed33cf2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst quoteAPI = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n\nfunction getRandomColor() {\n  let colorArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += colorArray[Math.floor(Math.random() * colorArray.length)]\n  }\n\n  return color;\n}\n\n\n\n\n\n\nfunction App() {\n\n  const [quoteObj, setQuoteObj] = useState({\n    quote: 'You miss 100% of the shots you donâ€™t take.',\n    author: 'Wayne Gretzky'\n  });\n\n  const [color, setColor] = useState('green');\n\n  const handleClick = () => {\n    fetch(quoteAPI)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        let quoteObj = data.quotes[Math.floor(Math.random() * data.quotes.length)];\n        setQuoteObj(prev => {\n          return {\n            ...prev,\n            quote: quoteObj.quote,\n            author: quoteObj.author\n          }\n        })\n      });\n\n    setColor(getRandomColor())\n  }\n  document.querySelector('#root').style.backgroundColor = color;\n\n  return (\n    <div class='wrapper' >\n      <div id='quote-box'>\n        <div id='quote-text'>\n          <i class=\"fas fa-quote-left\" style={{ color: color }} />\n          <span id='text' style={{ color: color }}>{quoteObj.quote}</span>\n        </div>\n        <div id='quote-author'>\n          <span id='author' style={{ color: color }}>- {quoteObj.author}</span>\n        </div>\n        <div id='quote-btns'>\n          <a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" class=\"twitter-share-button\"\n            data-text={`${quoteObj.quote}\" ${quoteObj.author}`}\n            data-url=\" \"\n            data-hashtags=\"quotes \"\n            data-dnt=\"true\"\n            data-show-count=\"true\"\n            style={{ backgroundColor: color }}>\n            <i class=\"fab fa-twitter\" /></a>\n\n\n\n          <button id='new-quote' onClick={handleClick} style={{ backgroundColor: color }}>New Quote</button>\n        </div>\n      </div>\n      <div class='footer'>By Altamish</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}